// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches expected output: $RelayProps.js 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

type $FragmentRef<T> = {
  +$fragmentRefs: $PropertyType<T, '$refType'>,
};

// This is now being completely fucked in Flow environment, see issue:
//   https://github.com/babel/babel/issues/9514
//
// Please leave it here so we know when it's fixed.

// prettier-ignore
export type $RelayProps<Props, RelayPropT> = $ObjMap<
  $Diff<Props, { relay: RelayPropT | void }>,
  // We currently don't know how to preserve Function and Object type
  // correctly while using \`createFragmentContainer\`, see:
  // https://github.com/facebook/relay/commit/2141964373703dcaa9bd49aa3cd2e9efdd09425f
  (<T: () => void>( T) =>  T) &
  (<T: { +$refType: any }>( T) =>  $FragmentRef<T>) &
  (<T: { +$refType: any }>(?T) => ?$FragmentRef<T>) &
  (<T: { +$refType: any }>( $ReadOnlyArray< T>) =>  $ReadOnlyArray< $FragmentRef<T>>) &
  (<T: { +$refType: any }>(?$ReadOnlyArray< T>) => ?$ReadOnlyArray< $FragmentRef<T>>) &
  (<T: { +$refType: any }>( $ReadOnlyArray<?T>) =>  $ReadOnlyArray<?$FragmentRef<T>>) &
  (<T: { +$refType: any }>(?$ReadOnlyArray<?T>) => ?$ReadOnlyArray<?$FragmentRef<T>>) &
  // see: https://github.com/facebook/relay/blob/v1.7.0-rc.1/packages/react-relay/modern/ReactRelayTypes.js
  // see: https://github.com/sibelius/relay-modern-network-deep-dive/tree/master/flow-typed
  (<T>(T) => T)
>

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
"use strict";
`;

exports[`matches expected output: $RelayProps.js 2`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

type $FragmentRef<T> = {
  +$fragmentRefs: $PropertyType<T, '$refType'>,
};

// This is now being completely fucked in Flow environment, see issue:
//   https://github.com/babel/babel/issues/9514
//
// Please leave it here so we know when it's fixed.

// prettier-ignore
export type $RelayProps<Props, RelayPropT> = $ObjMap<
  $Diff<Props, { relay: RelayPropT | void }>,
  // We currently don't know how to preserve Function and Object type
  // correctly while using \`createFragmentContainer\`, see:
  // https://github.com/facebook/relay/commit/2141964373703dcaa9bd49aa3cd2e9efdd09425f
  (<T: () => void>( T) =>  T) &
  (<T: { +$refType: any }>( T) =>  $FragmentRef<T>) &
  (<T: { +$refType: any }>(?T) => ?$FragmentRef<T>) &
  (<T: { +$refType: any }>( $ReadOnlyArray< T>) =>  $ReadOnlyArray< $FragmentRef<T>>) &
  (<T: { +$refType: any }>(?$ReadOnlyArray< T>) => ?$ReadOnlyArray< $FragmentRef<T>>) &
  (<T: { +$refType: any }>( $ReadOnlyArray<?T>) =>  $ReadOnlyArray<?$FragmentRef<T>>) &
  (<T: { +$refType: any }>(?$ReadOnlyArray<?T>) => ?$ReadOnlyArray<?$FragmentRef<T>>) &
  // see: https://github.com/facebook/relay/blob/v1.7.0-rc.1/packages/react-relay/modern/ReactRelayTypes.js
  // see: https://github.com/sibelius/relay-modern-network-deep-dive/tree/master/flow-typed
  (<T>(T) => T)
>

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
// @flow
type $FragmentRef<T> = {
  +$fragmentRefs: $PropertyType<T, '$refType'>
}; // This is now being completely fucked in Flow environment, see issue:
//   https://github.com/babel/babel/issues/9514
//
// Please leave it here so we know when it's fixed.
// prettier-ignore

export type $RelayProps<Props, RelayPropT> = $ObjMap<$Diff<Props, {
  relay: RelayPropT | void
}>, // We currently don't know how to preserve Function and Object type
// correctly while using \`createFragmentContainer\`, see:
<T: () => void>(T) => T & <T: {
  +$refType: any
}>(T) => $FragmentRef<T> & <T: {
  +$refType: any
}>(?T) => ?$FragmentRef<T> & <T: {
  +$refType: any
}>($ReadOnlyArray<T>) => $ReadOnlyArray<$FragmentRef<T>> & <T: {
  +$refType: any
}>(?$ReadOnlyArray<T>) => ?$ReadOnlyArray<$FragmentRef<T>> & <T: {
  +$refType: any
}>($ReadOnlyArray<?T>) => $ReadOnlyArray<?$FragmentRef<T>> & <T: {
  +$refType: any
}>(?$ReadOnlyArray<?T>) => ?$ReadOnlyArray<?$FragmentRef<T>> & // see: https://github.com/facebook/relay/blob/v1.7.0-rc.1/packages/react-relay/modern/ReactRelayTypes.js
// see: https://github.com/sibelius/relay-modern-network-deep-dive/tree/master/flow-typed
<T>(T) => T>;
`;

exports[`matches expected output: condition.js 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

if (__DEV__) {
  console.log('foo'); // eslint-disable-line no-console
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
"use strict";

if (process.env.NODE_ENV !== "production") {
  console.log('foo'); // eslint-disable-line no-console
}
`;

exports[`matches expected output: condition.js 2`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

if (__DEV__) {
  console.log('foo'); // eslint-disable-line no-console
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
declare var __DEV__: boolean;

// @flow
if (__DEV__) {
  console.log('foo'); // eslint-disable-line no-console
}
`;

exports[`matches expected output: noDevExpression.js 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

console.log('This file should stay as is because __DEV__ is missing.'); // eslint-disable-line no-console

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
"use strict";

console.log('This file should stay as is because __DEV__ is missing.'); // eslint-disable-line no-console
`;

exports[`matches expected output: noDevExpression.js 2`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

console.log('This file should stay as is because __DEV__ is missing.'); // eslint-disable-line no-console

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
// @flow
console.log('This file should stay as is because __DEV__ is missing.'); // eslint-disable-line no-console
`;

exports[`matches expected output: objectKey.js 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

module.exports = {
  rules: {},
  globals: {
    // this shouldn't change (valid object key):
    __DEV__: 'value',

    // this should change (replaceable __DEV__ value):
    key: __DEV__,
  },
};

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
"use strict";

module.exports = {
  rules: {},
  globals: {
    // this shouldn't change (valid object key):
    __DEV__: 'value',
    // this should change (replaceable __DEV__ value):
    key: process.env.NODE_ENV !== "production"
  }
};
`;

exports[`matches expected output: objectKey.js 2`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

module.exports = {
  rules: {},
  globals: {
    // this shouldn't change (valid object key):
    __DEV__: 'value',

    // this should change (replaceable __DEV__ value):
    key: __DEV__,
  },
};

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
declare var __DEV__: boolean;
// @flow
module.exports = {
  rules: {},
  globals: {
    // this shouldn't change (valid object key):
    __DEV__: 'value',
    // this should change (replaceable __DEV__ value):
    key: __DEV__
  }
};
`;

exports[`matches expected output: ternary.js 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

// eslint-disable-next-line no-unused-vars
const dev = __DEV__ ? 'true' : 'false';

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
"use strict";

// eslint-disable-next-line no-unused-vars
const dev = process.env.NODE_ENV !== "production" ? 'true' : 'false';
`;

exports[`matches expected output: ternary.js 2`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

// eslint-disable-next-line no-unused-vars
const dev = __DEV__ ? 'true' : 'false';

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
declare var __DEV__: boolean;
// @flow
// eslint-disable-next-line no-unused-vars
const dev = __DEV__ ? 'true' : 'false';
`;

exports[`matches expected output: valid-code.js 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

export default async function test(a: Object): Object {
  return {
    ...a,
    test_1: a?.b ?? 'default',
    test_2: !!__DEV__,
    test_3: await 'this',
  };
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = test;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

async function test(a) {
  var _ref;

  return _objectSpread({}, a, {
    test_1: (_ref = a === null || a === void 0 ? void 0 : a.b) !== null && _ref !== void 0 ? _ref : 'default',
    test_2: !!(process.env.NODE_ENV !== "production"),
    test_3: await 'this'
  });
}
`;

exports[`matches expected output: valid-code.js 2`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

export default async function test(a: Object): Object {
  return {
    ...a,
    test_1: a?.b ?? 'default',
    test_2: !!__DEV__,
    test_3: await 'this',
  };
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
declare var __DEV__: boolean;
// @flow
export default async function test(a: Object): Object {
  return { ...a,
    test_1: a?.b ?? 'default',
    test_2: !!__DEV__,
    test_3: await 'this'
  };
}
`;
